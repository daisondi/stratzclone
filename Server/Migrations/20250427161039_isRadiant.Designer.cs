// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using stratzclone.Server.Data;

#nullable disable

namespace StratzClone.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250427161039_isRadiant")]
    partial class isRadiant
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("stratzclone.Server.Models.Match", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<bool>("DidRadiantWin")
                        .HasColumnType("bit");

                    b.Property<int>("DurationSecs")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDateUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("MatchId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("stratzclone.Server.Models.Player", b =>
                {
                    b.Property<string>("SteamId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SteamId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("stratzclone.Server.Models.PlayerMatch", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<string>("SteamId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Assists")
                        .HasColumnType("int");

                    b.Property<int>("Deaths")
                        .HasColumnType("int");

                    b.Property<int>("HeroId")
                        .HasColumnType("int");

                    b.Property<bool>("IsRadiant")
                        .HasColumnType("bit");

                    b.Property<int>("Kills")
                        .HasColumnType("int");

                    b.HasKey("MatchId", "SteamId");

                    b.HasIndex("SteamId");

                    b.ToTable("PlayerMatches");
                });

            modelBuilder.Entity("stratzclone.Server.Models.PlayerMatchItem", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<string>("SteamId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ItemSeq")
                        .HasColumnType("int");

                    b.Property<int?>("Charges")
                        .HasColumnType("int");

                    b.Property<bool>("IsNeutral")
                        .HasColumnType("bit");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseTime")
                        .HasColumnType("int");

                    b.HasKey("MatchId", "SteamId", "ItemSeq");

                    b.HasIndex("ItemId");

                    b.ToTable("PlayerMatchItems");
                });

            modelBuilder.Entity("stratzclone.Server.Models.PlayerMatch", b =>
                {
                    b.HasOne("stratzclone.Server.Models.Match", "Match")
                        .WithMany("PlayerMatches")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("stratzclone.Server.Models.Player", "Player")
                        .WithMany("PlayerMatches")
                        .HasForeignKey("SteamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("stratzclone.Server.Models.PlayerMatchItem", b =>
                {
                    b.HasOne("stratzclone.Server.Models.PlayerMatch", "PlayerMatch")
                        .WithMany("Items")
                        .HasForeignKey("MatchId", "SteamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlayerMatch");
                });

            modelBuilder.Entity("stratzclone.Server.Models.Match", b =>
                {
                    b.Navigation("PlayerMatches");
                });

            modelBuilder.Entity("stratzclone.Server.Models.Player", b =>
                {
                    b.Navigation("PlayerMatches");
                });

            modelBuilder.Entity("stratzclone.Server.Models.PlayerMatch", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
